// content: {
// 	title_text: [
// 		``,
// 	],
// 		chapters: [
// 			{
// 				chapter_title: ``,
// 				chapter_text: [
// 					``,
// 				],
// 				chapter_code: [
// 					<code className='code_container_html'><span className='counter'>1</span><div className='code_html'></div></code>,
// 				],
// 				chapter_table: {
// 					table_header: [``],
// 					table_row: [
// 						[``],
// 					]
// 				},
// 				chapter_img: ``,
// 				chapter_list: [``]
// 			}
// 		],
// 			summary: [
// 				``,
// 			]
// }

const courseNames = [
	{
		section: `Html`,
		description: 'Html (от английского HyperText Markup Language) — это язык гипертекстовой разметки страницы. Он используется для того, чтобы дать браузеру понять, как нужно отображать загруженный сайт.',
		link: `/html`,
		courses: [{
			name: `Теги - кирпичи сайта`,
			link: `/html/tags`,
			content: {
				title_text: [
					`HTML-теги — основа языка HTML. Теги используются для разграничения начала и конца элементов в разметке.`,
					`Каждый HTML-документ состоит из дерева HTML-элементов и текста. Каждый HTML-элемент обозначается начальным (открывающим) и конечным (закрывающим) тегом. Открывающий и закрывающий теги содержат имя тега.`],
				chapters: [
					{
						chapter_code: [
							<code className='code_container_html'><span className='counter'>1</span><div className='code_html'>˂<span className='html_tag'>div </span><span className='html_class'>class=</span><span className='html_string'>'Начало'</span>˃мы начинаем˂<span className='html_tag'>span</span>˃программировать!˂<span className='html_tag'>/span</span>˃˂<span className='html_tag'>/div</span>˃</div></code>,
						],
					},
					{
						chapter_title: `Виды тегов`,
						chapter_text: [
							`Все HTML-элементы делятся на пять типов:`
						],
						chapter_list: [
							`пустые элементы (<br>, <hr>, <img>, <input>, <link>, <meta>);`,
							` элементы с неформатированным текстом (<script>, <style>);`,
							`элементы, выводящие неформатированный текст (<textarea>, <title>);`,
							`элементы из другого пространства имён (MathML и SVG);`,
							`обычные элементы — все остальные элементы.`
						]
					},
					{
						chapter_title: `Подсказка всех основных тегов HTML-5`,
						chapter_img: `https://html5book.ru/wp-content/uploads/2019/01/html5-tags.jpg`
					}
				],
				summary: [
					`HTML-теги — основа языка HTML. Из них и строится разметка сайта`, `Все HTML-элементы делятся на пять типов`
				]
			}
		},
		{
			name: `Атрибуты`,
			link: `/html/attributes`,
			content: {
				title_text: [
					`HTML-атрибуты сообщают браузеру, каким образом должен отображаться тот или иной элемент страницы. Атрибуты позволяют сделать более разнообразными внешний вид информации, добавляемой с помощью одинаковых тегов.`,
					`Значение атрибута заключается в кавычки. Названия и значения атрибутов не чувствительны к регистру, но, тем не менее, рекомендуется набирать их в нижнем регистре.`
				],
				chapters: [
					{
						chapter_title: `Глобальные атрибуты`,
						chapter_text: [
							`Глобальные атрибуты, приведенные в таблице ниже, могут быть использованы для любого HTML-элемента, хотя некоторые из них могут не оказывать на элементы никакого влияния.`
						],
						chapter_table: {
							table_header: [`Атрибут`, `Описание, принимаемое значение`],
							table_row: [
								[`accesskey`, `Генерирует сочетания клавиш для доступа к текущему элементу. Состоит из разделенного пробелами списка символов. Браузер в первую очередь выбирает те клавиши, которые существуют на раскладке клавиатуры. Применяется к следующим элементам: <a>, <area>, <button>, <input>, <label>, <legend>, <textarea>. Принимаемые значения: перечень названий клавиш.`],
								[`class`, `Определяет имя класса для элемента (используется для определения класса в таблице стилей). Принимаемые значения: имя класса.`],
								[`contenteditable`, `Определяет, может ли пользователь редактировать содержимое (контент). Позволяет преобразовать любое поле HTML в редактируемый элемент. Принимаемые значения: true / false.`],
								[`dir`, `Определяет направление текста контента в элементах <bdo> и <bdi>. Принимаемые значения: ltr / rtl / auto.`],
								[`draggable`, `Определяет, может ли пользователь перетащить элемент. Принимаемые значения: true / false / auto.`],
								[`hidden`, `Указывает на то, что элемент должен быть скрыт. Принимаемые значения: hidden.`],
								[`id`, `Определяет уникальный идентификатор элемента. Принимаемые значения: id — идентификатор элемента.`],
								[`lang`, `Определяет код языка содержимого (контента) в элементе. Принимаемые значения: код языка.`],
								[`spellcheck`, `Указывает, подлежит ли содержимое элемента проверке орфографии и грамматики. Принимаемые значения: true / false.`],
								[`style`, `Указывает на код CSS, применяемую для оформления элемента. Принимаемые значения: код CSS.`],
								[`tabindex`, `Определяет порядок перехода к элементу при помощи клавиши TAB. Принимаемые значения: порядковый номер.`],
								[`title`, `Определяет дополнительную информацию об элементе, задавая всплывающую подсказку для страницы. Принимаемые значения: текст.`],
								[`translate`, `Разрешает или запрещает перевод текста внутри элемента. Принимаемые значения: yes / no.`],
							]
						}
					},
					{
						chapter_title: `Для атрибутов тегов используются значения по умолчанию`,
						chapter_text: [
							`Когда для тега не добавлен какой-либо допустимый атрибут, это означает, что браузер в этом случае будет подставлять значение, заданное по умолчанию. Если вы ожидали получить иной результат на веб-странице, проверьте, возможно, следует явно указать значения некоторых атрибутов.`
						],

					},
					{
						chapter_title: `Порядок атрибутов в тегах`,
						chapter_text: [
							`Порядок атрибутов в любом теге не имеет значения и на результат отображения элемента не влияет. Поэтому теги представленные ниже по своему действию всегда будут равны.`
						],
						chapter_code: [
							<code className='code_container_html'><span className='counter'>1</span><div className='code_html'>˂<span className='html_tag'>img</span> <span className='html_class'>src=</span><span className='html_string'>"/images/title.gif"</span> <span className='html_class'>width=</span><span className='html_string'>"438"</span> <span className='html_class'>height=</span><span className='html_string'>"118"</span>˃</div></code>,
							<code className='code_container_html'><span className='counter'>1</span><div className='code_html'>˂<span className='html_tag'>img</span> <span className='html_class'>width=</span><span className='html_string'>"438"</span> <span className='html_class'>height=</span><span className='html_string'>"118"</span> <span className='html_class'>src=</span><span className='html_string'>"/images/title.gif"</span>˃</div></code>,
						],
					},
					{
						chapter_title: `Формат атрибутов`,
						chapter_text: [
							`Каждый атрибут тега относится к определенному типу (например: текст, число, путь к файлу и др.), который обязательно должен учитываться при написании атрибута. Так, в примере 3.3 упоминается тег <img>, он добавляет на веб-страницу рисунок, а его атрибут width задает ширину изображения в пикселах. Если поставить не число, а нечто другое, то значение будет проигнорировано и возникнет ошибка при валидации документа.`
						],

					}
				],
				summary: [
					`Атрибуты позволяют сообщять браузеру каким образом должен отображаться тот или иной элемент страницы.`,
					`Существует определенное количество атрибутов, применимых к любым HTML-тегам.`,
					`У каждого атрибута есть значение по умолчаниюю Порядок же атрибутов совершенно не важен, но важен тип их значения.`
				]
			}
		},
		{
			name: `Текст`,
			link: `/html/text`,
			content: {
				title_text: [
					`HTML- текст представлен в спецификации элементами для форматирования и группировки текста. Данные элементы являются контейнерами для текста и не имеют визуального отображения.`,
					`Элементы для форматирования текста несут смысловую нагрузку и обычно задают для текста, заключенного внутрь, стилевое оформление, например, выделяют текст жирным начертанием или отображают его шрифтом другого семейства (свойство font-family).`,
					`Грамотно отформатированный текст дает понять поисковым системам, какие слова несут важную смысловую нагрузку, по каким из них предпочтительно ранжировать веб-страницу в поисковой выдаче. Вся текстовая информация, отображаемая на сайте, размещается внутри элемента <body>.`
				],
				chapters: [
					{
						chapter_title: `HTML-элементы для текста`,
						chapter_list: [
							`Заголовки: <h1...h6>`,
							`Форматирование текста: <b>, <em>, <i>, <small>, <strong>, <sub>, <sup>, <ins>, <del>, <mark>`,
							`Ввод «компьютерного» текста: <code>, <kbd>, <samp>, <var>, <pre>`,
							`Оформление цитат и определений: <abbr>, <bdo>, <blockquote>, <q>, <cite>, <dfn>`,
							`Абзацы, средства переноса текста: <p>, <br>, <hr>`
						],
					},
					{
						chapter_title: `Любое количество пробелов идущих подряд, в браузере отображается как один`,
						chapter_text: [
							`Сколько бы вы не поставили пробелов между словами, это никак не повлияет на конечный вид текста. Это же правило относится к символам табуляции и переносу текста. Поэтому не ставьте лишних пробелов, поскольку это лишь увеличит общий объем файла, но никак не изменит вид документа в браузере. Приведенные ниже строки будут отображаться на веб-странице одинаково, несмотря на их разное написание.`,
							`Исключением из этого правила является тег <pre>, внутри которого любое число пробелов отображается именно так, как оно указано в коде.`
						],
					},
					{
						chapter_title: `Любое количество пробелов идущих подряд, в браузере отображается как один`,
						chapter_text: [
							`HTML не поддерживает расстановку переносов в словах, как это делают текстовые редакторы, иначе говоря, все слова пишутся целиком без их разбиения. Это условие несущественно, пока не используется выравнивание текста по ширине. В этом случае блок текста выравнивается по левому и правому краю. Короткие строки при этом растягиваются за счет автоматического добавления пробелов между словами. Иногда пустые блоки между словами настолько велики, что портят внешний вид страницы и ухудшают читабельность текста.`,
							`Представьте, что у вас в середине предложения есть какое-нибудь длинное слово, вот например «Дегидроэпиандростерон» . В текстовом редакторе это слово будет перенесено по слогам так, чтобы текст занял указанную ширину, а на веб-странице подобное слово будет отображаться целиком, без переносов.`
						],
					},
					{
						chapter_title: `Текст занимает ширину окна браузера`,
						chapter_text: [
							`Если вы просто напишете одну длинную строку в коде HTML, то в браузере она будет отформатирована, чтобы текст поместился по ширине в окно. Переносы текста будут добавлены автоматически в местах пробела или дефиса. Что произойдет, если в тексте нет ни того, ни другого символа? Браузер не сможет создать переносы и отобразит текст одной строкой. Если она шире окна браузера, то неминуемо появится горизонтальная полоса прокрутки.`
						],
					}
				],
				summary: [
					`Для изменения вида текста существует достаточно большое количество различных тегов, ведь текст самый популярный вид информации.`,
					`Пробелы, идущие подряд всегда будуь отображаьбся как один, кроме текста внутри тега <pre>`,
					`Текст не поддерживает переносы`,
					`Текст занимает всю ширину окна браузера`
				]
			}
		},
		{
			name: `Ссылки`,
			link: `/html/link`,
			content: {
				title_text: [
					`HTML-ссылки создаются с помощью элементов <a>, <area> и <link>. Ссылки представляют собой связь между двумя ресурсами, одним из которых является текущий документ.`,
				],
				chapters: [
					{
						chapter_title: `Структура ссылки`,
						chapter_text: [
							`Гиперссылки создаются с помощью элемента <a></a>. Внутрь помещается текст, который будет отображаться на веб-странице. Текст ссылки отображается в браузере с подчёркиванием, цвет шрифта — синий, при наведении на ссылку курсор мыши меняет вид.`,
							`Обязательным параметром элемента <a> является атрибут href, который задает URl-адрес веб-страницы.`,
							`Ссылка состоит из двух частей — указателя и адресной части. Указатель ссылки представляет собой фрагмент текста или изображение, видимые для пользователя. Адресная часть ссылки пользователю не видна, она представляет собой адрес ресурса, к которому необходимо перейти.`,
						]
					},
					{
						chapter_title: `Абсолютный и относительный путь`,
						chapter_text: [
							`Когда в ссылке указывается только имя файла, браузер предполагает, что файл находится в той же папке, что и документ, содержащий гиперссылку. На практике веб-сайты содержат сотни документов, которые размещают в отдельные папки, чтобы ими было легче управлять. Чтобы создать ссылку на файл, находящийся вне папки, содержащей текущий документ, необходимо указать расположение файла или путь. HTML поддерживает два вида пути: абсолютный и относительный.`,
						]
					},
					{
						chapter_title: `Абсолютный путь`,
						chapter_text: [
							`Абсолютный путь указывает точное местоположение файла в пределах всей структуры папок на компьютере (сервере). Абсолютный путь к файлу даёт доступ к файлу со сторонних ресурсов и содержит следующие компоненты:`,
						],
						chapter_list: [
							`протокол, например, http (опционально);`,
							`домен (доменное имя или IP-адрес компьютера);`,
							`папка (имя папки, указывающей путь к файлу);`,
							`файл (имя файла).`
						]
					},
					{
						chapter_title: `Относительный путь`,
						chapter_text: [
							`Относительный путь описывает путь к указанному документу относительно текущего. Путь определяется с учётом местоположения веб-страницы, на которой находится ссылка. Относительные ссылки используются при создании ссылок на другие документы на одном и том же сайте. Когда браузер не находит в ссылке протокол http://, он выполняет поиск указанного документа на том же сервере.`,
							`Относительный путь содержит следующие компоненты:`
						],
						chapter_list: [
							`папка (имя папки, указывающей путь к файлу);`,
							`файл (имя файла).`,
						]
					},
					{
						chapter_title: `Якоря`,
						chapter_text: [
							`Якоря, или внутренние ссылки, создают переходы на различные разделы текущей веб-страницы, позволяя быстро перемещаться между разделами. Это оказывается очень удобным в случае, когда на странице слишком много текста. Внутренние ссылки также создаются при помощи элемента <a> с разницей в том, что атрибут href содержит имя указателя — так называемый якорь, а не URl-адрес. Перед именем указателя всегда ставится знак #.`,
						]
					},
					{
						chapter_title: `Атрибуты ссылок`,
						chapter_text: [`Элемент <a> поддерживает глобальные атрибуты и собственные.`],
						chapter_table: {
							table_header: [`Атрибут`, `Описание, принимаемое значение`],
							table_row: [
								[`download`, `Дополняет атрибут href и сообщает браузеру, что ресурс должен быть загружен в момент, когда пользователь щелкает по ссылке, вместо того, чтобы, например, предварительно открыть его (как PDF-файл). Задавая имя для атрибута, мы таким образом задаем имя загружаемому объекту. Разрешается использовать атрибут без указания его значения`],
								[`href`, `Значением атрибута является URL-адрес документа, на который указывается ссылка.`],
								[`hreflang`, `Определяет язык связанного веб-документа. Используется только вместе с атрибутом href. Принимаемые значения — аббревиатура, состоящая из пары букв, обозначающих код языка`],
								[`media`, `Определяет, для каких типов устройств файл будет оптимизирован. Значением может быть любой медиа-запрос.`],
								[`ping`, `Отслеживает URL-адреса ресурсов, по которым переходил пользователь.`],
								[`rel`, `Дополняет атрибут href информацией об отношении между текущим и связанным документом`],
								[`target`, `Указывает на то, в каком окне должен открываться документ, к которому ведет ссылка.`],
								[`type`, `Указывает MIME-тип файлов ссылки, т.е. расширение файла, носит больше справочную информацию.`]
							]
						}
					}
				],
				summary: [
					`Ссылки представляют собой связь между двумя ресурсами, одним из которых является текущий документ`,
					`Сслыки создаются с помощью тега <a></a>`,
					`При создании ссылки к файлу существует два вида пути ссылки: относительный и абсолютный`,
					`Ссылки имеют как глобальные, так и собственные атрибуты`
				]
			}
		},
		{
			name: `Изображения`,
			link: `/html/image`,
			content: {
				title_text: [
					`HTML-изображения добавляются на веб-страницы с помощью элемента <img>. Использование графики делает веб-страницы визуально привлекательнее. Изображения помогают лучше передать суть и содержание веб-документа.`,
					`Элементы <map> и <area> позволяют создавать карты-изображения с активными областями.`,
				],
				chapters: [
					{
						chapter_title: `Элемент <img>`,
						chapter_text: [
							`Элемент <img> представляет изображение и его резервный контент, который добавляется с помощью атрибута alt. Так как элемент <img> является строчным, то рекомендуется располагать его внутри блочного элемента, например, <p> или <div>.`,
							`Элемент <img> имеет обязательный атрибут src, значением которого является абсолютный или относительный путь к изображению.`
						]
					},
					{
						chapter_title: `Размеры изображения`,
						chapter_text: [
							`Без задания размеров изображения рисунок отображается на странице в реальном размере. Отредактировать размеры изображения можно с помощью атрибутов width и height. Если будет задан только один из атрибутов, то второй будет вычисляться автоматически для сохранения пропорций рисунка.`,
						]
					},
					{
						chapter_title: `Форматы графических файлов`,
						chapter_list: [
							`Формат JPEG (Joint Photographic Experts Group). Изображения JPEG идеальны для фотографий, они могут содержать миллионы различных цветов. Сжимают изображения лучше GIF, но текст и большие площади со сплошным цветом могут покрыться пятнами.`,
							`Формат GIF (Graphics Interchange Format). Идеален для сжатия изображений, в которых есть области со сплошным цветом, например, логотипов. GIF-файлы позволяют установить один из цветов прозрачным, благодаря чему фон веб-страницы может проявляться через часть изображения. Также GIF-файлы могут включать в себя простую анимацию. GIF-изображения содержат всего лишь 256 оттенков, из-за чего изображения выглядят пятнистыми и нереалистичного цвета, как плакаты.`,
							`Формат PNG (Portable Network Graphics). Включает в себя лучшие черты GIF- и JPEG-форматов. Содержит 256 цветов и дает возможность сделать один из цветов прозрачным, при этом сжимает изображения в меньший размер, чем GIF-файл.`,
							`Формат APNG (Animated Portable Network Graphics). Формат изображения, основанный на формате PNG. Позволяет хранить анимацию, а также поддерживает прозрачность.`,
							`SVG (Scalable Vector Graphics). SVG-рисунок состоит из набора геометрических фигур, описанных в формате XML: линия, эллипс, многоугольник и т.п. Поддерживается как статичная, так и анимированная графика. Набор функций включает в себя различные преобразования, альфа-маски, эффекты фильтров, возможность использования шаблонов. Изображения в формате SVG могут изменяться в размере без снижения качества.`,
							`Формат BMP (Bitmap Picture). Представляет собой несжатое (оригинальное) растровое изображение, шаблоном которого является прямоугольная сетка пикселей. Bitmap-файл состоит из заголовка, палитры и графических данных. В заголовке хранится информация о графическом изображении и файле (глубина пикселей, высота, ширина и количество цветов). Палитра указывается только в тех Bitmap-файлах, которые содержат палитровые изображения (8 и менее бит) и состоят не более чем из 256 элементов. Графические данные представляют саму картинку. Глубина цвета в данном формате может быть 1, 2, 4, 8, 16, 24, 32, 48 бит на пиксель.`,
							`Формат ICO (Windows icon). Формат хранения значков файлов в Microsoft Windows. Также, Windows icon, используется как иконка на сайтах в интернете. Именно картинка такого формата отображается рядом с адресом сайта или закладкой в браузере. Один ICO-файл содержит один или несколько значков, размер и цветность каждого из которых задаётся отдельно. Размер значка может быть любым, но наиболее употребимы квадратные значки со сторонами 16, 32 и 48 пикселей.`,
						]
					},
					{
						chapter_title: `Атрибуты ссылки`,
						chapter_table: {
							table_header: [`Атрибут`, `Краткое описание`],
							table_row: [
								[`alt`, `Задает альтернативный текст для активной области карты.`],
								[`coords	`, `Определяет позицию области на экране. Координаты задаются в единицах длины и разделяются запятыми: для круга — координаты центра и радиус круга; для прямоугольника — координаты верхнего левого и правого нижнего углов; для многоугольника — координаты вершин многоугольника в нужном порядке, также рекомендуется указывать последние координаты, равные первым, для логического завершения фигуры.`],
								[`download	`, `Дополняет атрибут href и сообщает браузеру, что ресурс должен быть загружен в момент, когда пользователь щелкает по ссылке, вместо того, чтобы, например, предварительно открыть его (как PDF-файл). Задавая имя для атрибута, мы таким образом задаем имя загружаемому объекту. Разрешается использовать атрибут без указания его значения.`],
								[`href`, `Указывает URL-адрес для ссылки. Может быть указан абсолютный или относительный адрес ссылки.`],
								[`hreflang`, `Определяет язык связанного веб-документа. Используется только вместе с атрибутом href. Принимаемые значения — аббревиатура, состоящая из пары букв, обозначающих код языка.`],
								[`media`, `Определяет, для каких типов устройств файл будет оптимизирован. Значением может быть любой медиа-запрос.`],
								[`rel	`, `Дополняет атрибут href информацией об отношении между текущим и связанным документом.`],
								[`shape`, `Задает форму активной области на карте и ее координаты.`],
								[`target	`, `Указывает, куда будет загружен документ при переходе по ссылке.`],
								[`type`, `Указывает MIME-тип файлов ссылки, т.е. расширение файла.`]
							]
						}
					},
				],
				summary: [
					`Изображения на странице создаются тегом <img>`,
					'Размеры изображения редактируются с помощью стилей width и height',
					'Существует несколько форматов изображения, каждый из которых служит для свой цели',
					'Изображения также имеют как несколько собственных атрибутов, так и все глобальные атрибуты'
				]
			}
		},
		{
			name: `Таблицы`,
			link: `/html/table`,
			content: {
				title_text: [
					`HTML-таблицы упорядочивают и выводят на экран данные с помощью строк или столбцов. Таблицы состоят из ячеек, образующихся при пересечении строк и столбцов.`,
					`Ячейки таблиц могут содержать любые HTML-элементы, такие как заголовки, списки, текст, изображения, элементы форм, а также другие таблицы. Каждой таблице можно добавить связанный с ней заголовок, расположив его перед таблицей или после неё.`
				],
				chapters: [
					{
						chapter_title: `Как создать таблицу`,
						chapter_text: [
							`Таблица создаётся при помощи элемента <table></table>, который является контейнером для элементов таблицы и все элементы должны находиться внутри него.`,
							'Строки или ряды таблицы создаются с помощью элемента <tr>. Количество горизонтальных строк таблицы определяется количеством элементов <tr></tr>.',
							`Элемент <th> создаёт заголовок столбца — специальную ячейку, текст в которой выделяется полужирным. Количество ячеек заголовка определяется количеством элементов <th></th>. Для элемента доступны атрибуты colspan, rowspan, headers.`,
							`Элемент <td> создаёт ячейки таблицы, внутрь которых помещаются данные таблицы. Элементы <td></td>, расположенные в одном ряду, определяют количество ячеек в строке таблицы. Количество пар ячеек <td> должно быть равно количеству пар ячеек <th>. Для элемента доступны атрибуты colspan, rowspan, headers.`
						]
					},
					{
						chapter_title: `Как объединить ячейки таблицы`,
						chapter_text: [
							`Атрибуты colspan и rowspan объединяют ячейки таблицы. Атрибут colspan задает количество ячеек, объединенных по горизонтали, а rowspan — по вертикали.`,
						]
					},
					{
						chapter_title: `Атрибуты элементов таблицы`,
						chapter_table: {
							table_header: [`Атрибут`, `Описание, принимаемое значение`],
							table_row: [
								[`colspan`, `Количество ячеек в строке для объединения по горизонтали. <td colspan="3"> Возможные значения: число от 1 до 999.`],
								[`headers`, `Задает список ячеек заголовка, содержащих информацию о заголовке текущей ячейки данных. Предназначен для речевых браузеров.`],
								[`rowspan`, `Количество ячеек в столбце для объединения по вертикали.`],
								[`span`, `Количество колонок, объединяемых для задания единого стиля, по умолчанию равно 1.`]
							]
						}
					}
				],
				summary: [
					`HTML-таблицы - обычные таблицы, но на странице сайта`,
					'Таблица создаётся при помощи элемента <table></table>',
					'Ячейки таблицы объединяются с помощью атрибутов colspan и rowspan',
					'Таблица имеет как свои, так и глобальные атрибуты'
				]
			}

		},
		{
			name: `Списки`,
			link: `/html/list`,
			content: {
				title_text: [
					`HTML-списки используются для группировки связанных между собой фрагментов информации.`,
					'Каждый список представляет собой контейнер, внутри которого располагаются элементы списка или пары термин-определение.',
					'Элементы списка ведут себя как блочные элементы, располагаясь друг под другом и занимая всю ширину блока-контейнера. Каждый элемент списка имеет дополнительный блок, расположенный сбоку, который не участвует в компоновке.'
				],
				chapters: [
					{
						chapter_title: `Маркированный список`,
						chapter_text: [
							`Маркированный список представляет собой неупорядоченный список (от англ. Unordered List). Создаётся с помощью элемента <ul>. В качестве маркера элемента списка выступает метка, например, закрашенный кружок.`,
							'Браузеры по умолчанию добавляют следующее форматирование блоку списка:'
						],
						chapter_code: [
							`ul {
   							padding-left: 40px;
  							margin-top: 1em;
  							margin-bottom: 1em;
							}`
						]
					},
					{
						chapter_title: `Нумерованный список`,
						chapter_text: [
							`Нумерованный список создаётся с помощью элемента <ol>. Каждый пункт списка также создаётся с помощью элемента <li>. Браузер нумерует элементы по порядку автоматически и если удалить один или несколько элементов такого списка, то остальные номера будут автоматически пересчитаны.`,
							'Блок списка также имеет стили браузера по умолчанию:'
						],
						chapter_code: [
							`ol {
								padding-left: 40px;
								margin-top: 1em;
								margin-bottom: 1em;
							}`
						]
					},
					{
						chapter_title: `Атрибуты списка`,
						chapter_table: {
							table_header: [`Атрибут`, 'Описание, принимаемое значение'],
							table_row: [
								[`reversed`, 'Атрибут reversed задает отображение списка в обратном порядке (например, 9, 8, 7…).'],
								['start', 'Атрибут start задает начальное значение, от которого пойдет отсчет нумерации'],
								['type', 'Атрибут type задает вид маркера для использования в списке (в виде букв или цифр)']
							]
						}
					}
				],
				summary: [
					`Списки используются для группировки нескольких элементов вместе друг под другом`,
					'Существуют маркированные и нумерованные списки',
					'Списки имеют свои собственные атрибуты'
				]
			}

		}
		]
	},
	{
		section: `Css`,
		link: `/css`,
		description: 'Css (Cascading Style Sheets, каскадные таблицы стилей) — язык описания внешнего вида HTML-документа. Это одна из базовых технологий в современном интернете. Практически ни один сайт не обходится без CSS, поэтому HTML и CSS действуют в единой связке.',
		courses: [{
			name: `Классы`,
			link: `/css/classes`,
			content: {
				title_text: [
					`Классы применяют, когда необходимо определить стиль для индивидуального элемента веб-страницы или задать разные стили для одного тега. При использовании совместно с тегами синтаксис для классов будет следующий:`,
				],
				chapters: [
					{
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_class'>.class </span>｛</div></div>
								<div><span className='counter'>2</span><pre className='code_html'>			property: <span className='html_class'>characteristic</span>;</pre></div>
								<div><span className='counter'>3</span><div className='code_html'>｝</div></div>
							</code>,
						],
					},
					{
						chapter_title: `Классы применимы ко всем элементам`,
						chapter_text: [
							`Созданный класс можно применять к любым элементам веб-страницы. Вы можете придавать стиль не только целым заголовкам и абзацам, но и отдельным фрагментам страницы, например, словам (используя рассмотренный нами в первой и второй главе тег <span> и присваивая ему класс).`,
						],
					},
					{
						chapter_title: `Правила написания стилей классов`,
						chapter_text: [
							`Запомните несколько правил написания классов:`,
						],
						chapter_list: [
							`в CSS перед названием селектора класса обязательно ставится точка (но при присвоении класса в HTML-документе эта точка не нужна)`,
							`в названии классов можно использовать только буквы латинского алфавита, дефис, символ подчеркивания, цифры`,
							`название класса всегда должно начинаться с буквы (правильные варианты названий: .intro, .img-border, .nav_menu_01; неправильные: .2color, .-link, ._divider)`,
							`названия классов CSS чувствительны к регистру, поэтому классы вроде .review и .Review будут восприниматься как два отдельных`
						]
					}
				],
				summary: [
					`Классы - самый распространенный способ определения стиля нескольких элементов`,
					`Классы применимы ко всем элементам`,
					`Основные правила нписание стилей классов`
				]
			}
		},
		{
			name: `Идентификатор ID`,
			link: `/css/id`,
			content: {
				title_text: [
					`Идентификатор определяет уникальное название элемента. Записывается он почти так же, как и класс, только в CSS вместо точки ставится символ решетки #:`,
				],
				chapters: [
					{
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>#footer</span>｛</div></div>
								<div><span className='counter'>2</span><pre className='code_html'>			width: <span className='html_class'>100%</span>;</pre></div>
								<div><span className='counter'>3</span><div className='code_html'>｝</div></div>
							</code>,
						],
					},
					{
						chapter_title: `Присваивание идентификатора`,
						chapter_text: [
							`В HTML-документе идентификатор присваивается с помощью атрибута id:`,
						],
						chapter_code: [
							<code className='code_container_html'><span className='counter'>1</span><div className='code_html'>˂<span className='html_tag'>div</span>˃ <span className='html_class'>id:</span><span className='html_string'>'footer'</span>˂<span className='html_tag'>/div</span>˃</div></code>,
						],
					},
					{
						chapter_text: [
							`Возможно, у вас возник вопрос: в чем разница между идентификатором и классом? Существует несколько отличий:`,
						],
					},
					{
						chapter_list: [
							`ID – это уникальное название элемента на веб-странице, которое должно встречаться на ней только один раз (например, шапка сайта и подвал: id="header" и id="footer"), в то время как класс может присваиваться нескольким элементам с целью отличать их от остальных`,
							`Идентификаторы удобны для JavaScript-разработчиков, поскольку позволяют получить быстрый доступ к элементу DOM из скриптов (во многом именно поэтому необходимо, чтобы ID встречался на странице лишь один раз)`,
							`Каждое правило CSS имеет свой так называемый вес (от веса зависит, какое из правил получит более высокий приоритет при выполнении). Идентификатор имеет больший вес, чем класс, поэтому, если элементу присвоен и ID, и класс, предпочтение отдается ID`,
							`С помощью идентификаторов можно ставить якорные ссылки на определенные элементы веб-страницы. Достаточно присвоить этому элементу ID`,
						]
					}
				],
				summary: [
					`Идентификатор нужен для определения стилей для единственного элемента страницы`,
					`Как присваивать ID элементу`,
					`Разница между классами и идентификаторами`
				]
			}
		},
		{
			name: `Контекстные селекторы`,
			link: `/css/context`,
			content: {
				title_text: [
					`При создании веб-страницы часто приходится вкладывать одни теги внутрь других. Чтобы стили для этих тегов использовались корректно, помогут селекторы, которые работают только в определённом контексте. Например, задать стиль для тега <b> только когда он располагается внутри контейнера <p>. Таким образом можно одновременно установить стиль для отдельного тега, а также для тега, который находится внутри другого.`,
				],
				chapters: [
					{
						chapter_title: ``,
						chapter_text: [
							`Контекстный селектор состоит из простых селекторов разделенных пробелом. Так, для селектора класса только внутри другого класса будет:`,
						],
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_class'>.class .next_class</span>｛</div></div>
								<div><span className='counter'>2</span><pre className='code_html'>			height: <span className='html_class'>100px</span></pre></div>
								<div><span className='counter'>3</span><div className='code_html'>｝</div></div>
							</code>,
						]
					},
					{
						chapter_title: `Применение контекстных селекторов`,
						chapter_text: [
							`Более широкие возможности контекстные селекторы дают при использовании идентификаторов и классов. Это позволяет устанавливать стиль только для того элемента, который располагается внутри определённого класса`,
						],
					}
				],
				summary: [
					`Что такое контекстные селекторы?`,
					`Применение контекстных селекторов`,
				]
			}
		},
		{
			name: `Соседние селекторы`,
			link: `/css/neighbour`,
			content: {
				title_text: [
					`Соседними называются элементы веб-страницы, когда они следуют непосредственно друг за другом в коде документа. Рассмотрим несколько примеров отношения элементов:`,
				],
				chapters: [
					{
						chapter_code: [
							<code className='code_container_html'><span className='counter'>1</span>＜<span className='html_tag'>div</span>＞Lorem ipsum＜<span className='html_tag'>b</span>＞dolor sit＜/<span className='html_tag'>b</span>＞＜<span className='html_tag'>i</span>＞amen＜/<span className='html_tag'>i</span>＞＜/<span className='html_tag'>div</span>＞<div className='code_html'></div></code>,
						],
					},
					{
						chapter_text: [
							`Здесь теги <b> и <i> никак не перекрываются и представляют собой соседние элементы. То, что они расположены внутри контейнера <div>, никак не влияет на их отношение.`,
						],
					},
					{
						chapter_title: `Синтаксис селектора соседних элементов`,
						chapter_text: [
							`Для управления стилем соседних элементов используется символ плюса (+), который устанавливается между двумя селекторами. Общий синтаксис следующий:`,
						],
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_tag'>b</span> + <span className='html_tag'>i</span>｛</div></div>
								<div><span className='counter'>2</span><pre className='code_html'>			padding-left: <span className='html_class'>10em</span>;</pre></div>
								<div><span className='counter'>3</span><div className='code_html'>｝</div></div>
							</code>,
						],
					},
					{
						chapter_title: `Практическое применение`,
						chapter_text: [
							`Соседние селекторы удобно использовать для тех тегов, к которым автоматически добавляются отступы, чтобы самостоятельно регулировать величину отбивки. Например, если подряд идут теги <h1> и <h2>, то расстояние между ними легко регулировать как раз с помощью соседних селекторов. Аналогично дело обстоит и для идущих подряд тегов <h2> и <p>, а также в других подобных случаях.`,
						],
					}
				],
				summary: [
					`Что это такое`,
					`Синтаксис селекторов соседних элементов`,
					`Практическое применение`,
				]
			}
		},
		{
			name: `Дочерние селекторы`,
			link: `/css/child`,
			content: {
				title_text: [
					`Дочерним называется элемент, который непосредственно располагается внутри родительского элемента.`,
				],
				chapters: [
					{
						chapter_text: [
							`Нагляднее это видно на дереве элементов, так называется структура отношений тегов документа между собой.`,
						],
						chapter_img: `https://javascript.ru/files/upload/jsintro/dom2.png`,
					},
					{
						chapter_title: `Синтаксис дочерних селекторов`,
						chapter_text: [
							`Вернёмся теперь к селекторам. Дочерним селектором считается такой, который в дереве элементов находится прямо внутри родительского элемента. Синтаксис применения таких селекторов следующий:`,
						],
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_class'>.selector1 ＞ .selector2</span>｛</div></div>
								<div><span className='counter'>2</span><pre className='code_html'>			display: <span className='html_class'>flex</span>;</pre></div>
								<div><span className='counter'>3</span><div className='code_html'>｝</div></div>
							</code>,
						],
					},
					{
						chapter_title: `Разница между контекстными и дочерными селекторами`,
						chapter_text: [
							`По своей логике дочерние селекторы похожи на селекторы контекстные. Разница между ними следующая. Стиль к дочернему селектору применяется только в том случае, когда он является прямым потомком, иными словами, непосредственно располагается внутри родительского элемента. Для контекстного селектора же допустим любой уровень вложенности.`,
						],
					}
				],
				summary: [
					`Дочерние селекторы?`,
					`Синтаксис селекторов дочерних элементов`,
					`Контекстные и дочерние селекторы - в чем разница?`
				]
			}
		},
		{
			name: `Псевдоклассы`,
			link: `/css/pseudo`,
			content: {
				title_text: [
					`Псевдоклассы определяют динамическое состояние элементов, которое изменяется с помощью действий пользователя, а также положение в дереве документа. Примером такого состояния служит текстовая ссылка, которая меняет свой цвет при наведении на неё курсора мыши. При использовании псевдоклассов браузер не перегружает текущий документ, поэтому с помощью псевдоклассов можно получить разные динамические эффекты на странице.`,
				],
				chapters: [
					{
						chapter_title: `Синтаксис применения псевдоклассов следующий.`,
						chapter_text: [
							`Вначале указывается селектор, к которому добавляется псевдокласс, затем следует двоеточие, после которого идёт имя псевдокласса. Допускается применять псевдоклассы к именам идентификаторов или классов (A.menu:hover {color: green}), а также к контекстным селекторам (.menu A:hover {background: #fc0}). Если псевдокласс указывается без селектора впереди (:hover), то он будет применяться ко всем элементам документа.`,
						],
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_class'>.selector</span><span className='html_id'>:pseudo</span>｛</div></div>
								<div><span className='counter'>2</span><pre className='code_html'>			color: <span className='html_class'>red</span></pre></div>
								<div><span className='counter'>3</span><div className='code_html'>｝</div></div>
							</code>,
						]
					},
					{
						chapter_title: `Популярные псевдоклассы`,
						chapter_table: {
							table_header: [`Название псевдокласса`, `Описание`],
							table_row: [
								[`:link`, `Этот псевдокласс задает стиль ссылкам, по которым пользователь еще не перешел`],
								[`:visited`, `Этот же, наоборот, применяет стиль к уже посещенным ссылкам`],
								[`:hover`, `Определяет стиль элемента, когда на него наведен курсор (может применяться не только к ссылкам)`],
								[`:focus`, `Применяет стиль к элементу при фокусировке на нем (например, при установке курсора в строку поиска)`],
								[`:not()`, `Этот полезный псевдокласс позволяет выбрать и стилизовать только те элементы, которые не содержат селектор, указанный в скобках`],
								[`::after`, `Используется вместе со свойством content и позволяет вывести необходимые данные после содержимого элемента`],
								[`::before`, `Выполняет похожую функцию, что и предыдущий, только выводит данные перед содержимым элемента`]
							]
						}
					}
				],
				summary: [
					`Что же это такое`,
					`Синтаксис псевдоклассов`,
					`Список популярных класов с описанием`
				]
			}
		}
		]
	},
	{
		section: `Javascript`,
		link: `/javascript`,
		courses: [{
			name: `Переменные`,
			link: `/javascript/variables`,
			content: {
				title_text: [
					`JavaScript-приложению обычно нужно работать с информацией. Например,
в интернет-магазине информация может включать продаваемые товары и корзину покупок, в
чате информация может включать пользователей, сообщения и многое другое.
Переменные используются для хранения этой информации.`,
				],
				chapters: [
					{
						chapter_title: `Переменная`,
						chapter_text: [
							`Переменная – это «именованное хранилище» для данных. Мы можем использовать переменные для хранения товаров, посетителей и других данных.`,
							`Для создания переменной в JavaScript используйте ключевое слово let.`,
							`Приведённая ниже инструкция создаёт (другими словами: объявляет или определяет) переменную с именем «message» и помещает в неё данные, используя оператор присваивания =`,
						],
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> message = <span className='html_string'>'Hello world'</span></div></div>
							</code>,
						]
					},
					{
						chapter_title: `Аналогия из жизни`,
						chapter_text: [
							`Мы легко поймём концепцию «переменной», если представим её в виде «коробки» для данных с уникальным названием на ней.`,
							`Например, переменную message можно представить как коробку с названием "message" и значением "Hello!" внутри:`
						],
						chapter_img: `https://psv4.userapi.com/c532036/u487798425/docs/d32/bef2f4ab4b08/Variable_Box.png?extra=fwd36viJvLl6o0tJPxT4s1iTOLU-zRgIiFU0w33qXPk3wfyNDLMFfwgeR_SPZgunnDmmvvDNMIm_dL489N4pg2GU4nvCTNqxJ9YyjpGlQd3BnM8Z1lmHuXHqBdrS3aSnnDFLIfOiUV2OFGr2XSAZ4iw`,
					},
					{
						chapter_text: [
							`Мы можем положить любое значение в коробку. Мы также можем изменить его столько раз, сколько захотим. При изменении значения старые данные удаляются из переменной.`,
						]
					},
					{
						chapter_title: `Имена переменных`,
						chapter_text: [
							`В JavaScript есть два ограничения, касающиеся имён переменных:`,
						],
						chapter_list: [`Имя переменной должно содержать только буквы, цифры или символы $ и _.`, `Первый символ не должен быть цифрой`]
					},
					{
						chapter_text: [
							`Примеры допустимых имён:`,
						],
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> userName;</div></div>
								<div><span className='counter'>2</span><div className='code_html'><span className='html_id'>let</span> test123;</div></div>
							</code>,
						]
					}
				],
				summary: [
					`Переменные - основное место хранения информации`,
					`Аналогия из жизни`,
					`Правила написания названий переменных`
				]
			}
		},
		{
			name: `Типы данных`,
			link: `/javascript/types`,
			content: {
				title_text: [
					`Значение в JavaScript всегда относится к данным определённого типа. Например, это может быть строка или число.`,
					`Есть восемь основных типов данных в JavaScript. В этой главе мы рассмотрим их в общем, а в следующих главах поговорим подробнее о каждом.`,
					`Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число:`
				],
				chapters: [
					{
						chapter_title: ``,
						chapter_text: [
							``,
						],
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_comment'>// Не будет ошибкой</span></div></div>
								<div><span className='counter'>2</span><div className='code_html'><span className='html_id'>let</span> message = <span className='html_string'>'Hello world'</span></div></div>
								<div><span className='counter'>3</span><div className='code_html'>message = <span className='html_tag'>123456789</span></div></div>
							</code>,
						]
					},
					{
						chapter_title: `Таблица типов данных JavaScript`,
						chapter_table: {
							table_header: [`Название типа`, 'Описание'],
							table_row: [
								[`Число`, `Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой.`],
								[`BigInt`, `В JavaScript тип «number» не может содержать числа больше, чем (253-1) (т. е. 9007199254740991), или меньше, чем -(253-1) для отрицательных чисел. Это техническое ограничение вызвано их внутренним представлением. Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины.`],
								[`Строка`, `Строка (string) в JavaScript должна быть заключена в кавычки. Двойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript.`],
								[`Булевой (логический) тип`, `Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь). Такой тип, как правило, используется для хранения значений да/нет: true значит «да, правильно», а false значит «нет, не правильно».`],
								[`Значение null`, `Специальное значение null не относится ни к одному из типов, описанных выше. Оно формирует отдельный тип, который содержит только значение null`],
								[`Значение undefined`, `Специальное значение undefined также стоит особняком. Оно формирует тип из самого себя так же, как и null. Оно означает, что «значение не было присвоено».`],
								[`Объекты и символы`, `Тип object (объект) – особенный. Все остальные типы называются «примитивными», потому что их значениями могут быть только простые значения (будь то строка, или число, или что-то ещё). В объектах же хранят коллекции данных или более сложные структуры.`],
							]
						}
					}
				],
				summary: [
					`Типы данных`,
					`Список типов данных`
				]
			}
		},
		{
			name: `Операторы математики`,
			link: `/javascript/operators`,
			content: {
				title_text: [
					`Многие операторы знакомы нам ещё со школы: сложение +, умножение *, вычитание - и так далее.`,
					`В этой главе мы начнём с простых операторов, а потом сконцентрируемся на специфических для JavaScript аспектах, которые не проходят в школьном курсе арифметики.`
				],
				chapters: [
					{
						chapter_title: `Термины: «унарный», «бинарный», «операнд»`,
						chapter_text: [
							`Прежде, чем мы двинемся дальше, давайте разберёмся с терминологией.`,
						],
						chapter_list: [
							`Операнд – то, к чему применяется оператор. Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».`,
							`Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный минус "-" меняет знак числа на противоположный:`
						]
					},
					{
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> x = <span className='html_tag'>1</span>;</div></div>
								<div><span className='counter'>2</span><pre className='code_html'>	</pre></div>
								<div><span className='counter'>3</span><div className='code_html'>x = -x;</div></div>
								<div><span className='counter'>4</span><div className='code_html'>alert ( x ); <span className='html_comment'>// -1, применили унарный минус</span></div></div>
							</code>,
						]
					},
					{
						chapter_list: [`Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:`]
					},
					{
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> x = <span className='html_tag'>3</span>, y = <span className='html_tag'>2</span>;</div></div>
								<div><span className='counter'>2</span><div className='code_html'>alert ( y - x ); <span className='html_comment'>// 2, бинарный минус вычитает значения</span></div></div>
							</code>,
						]
					},
					{
						chapter_code: [
							<code className='code_container_multiple'>
								<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> x = <span className='html_tag'>3</span>, y = <span className='html_tag'>2</span>;</div></div>
								<div><span className='counter'>2</span><div className='code_html'>alert ( y - x ); <span className='html_comment'>// 2, бинарный минус вычитает значения</span></div></div>
							</code>,
						]
					},
					{
						chapter_title: `Математика`,
						chapter_text: [
							`Поддерживаются следующие математические операторы:`,
						],
						chapter_list: [
							`Сложение +`,
							`Вычитание -`,
							`Умножение *`,
							`Деление /`,
							`Взятие остатка от деления %`,
							`Возведение в степень **`,
						]
					},
					{
						chapter_title: `Приоритет операторов`,
						chapter_text: [
							`В том случае, если в выражении есть несколько операторов – порядок их выполнения определяется приоритетом, или, другими словами, существует определённый порядок выполнения операторов.`,
							`Из школы мы знаем, что умножение в выражении 1 + 2 * 2 выполнится раньше сложения. Это как раз и есть «приоритет». Говорят, что умножение имеет более высокий приоритет, чем сложение.`,
							`Скобки важнее, чем приоритет, так что, если мы не удовлетворены порядком по умолчанию, мы можем использовать их, чтобы изменить приоритет. Например, написать (1 + 2) * 2.`,
							`В JavaScript много операторов. Каждый оператор имеет соответствующий номер приоритета. Тот, у кого это число больше, – выполнится раньше. Если приоритет одинаковый, то порядок выполнения – слева направо.`,
							`Отрывок из таблицы приоритетов (нет необходимости всё запоминать, обратите внимание, что приоритет унарных операторов выше, чем соответствующих бинарных):`,
						],
						chapter_table: {
							table_header: [`Название`, `Приоритет`, `Обозначение`],
							table_row: [
								[`Унарный плюс`, `17`, `+`],
								[`Унарный минус`, `17`, `-`],
								[`Возведение в степень`, `16`, `**`],
								[`Умножение`, `15`, `*`],
								[`Деление`, `15`, `/`],
								[`Сложение`, `13`, `+`],
								[`Вычитание`, `13`, `-`],
								[`Присваивание`, `3`, `=`],
							]
						}
					},
					{
						chapter_title: `Побитовые операторы`,
						chapter_text: [
							`Побитовые операторы работают с 32-разрядными целыми числами (при необходимости приводят к ним), на уровне их внутреннего двоичного представления.`,
							`Эти операторы не являются чем-то специфичным для JavaScript, они поддерживаются в большинстве языков программирования.`,
							`Поддерживаются следующие побитовые операторы:`
						],
						chapter_list: [
							`AND(и) ( & )`,
							`OR(или) ( | )`,
							`XOR(побитовое исключающее или) ( ^ )`,
							`NOT(не) ( ~ )`,
							`LEFT SHIFT(левый сдвиг) ( << )`,
							`RIGHT SHIFT(правый сдвиг) ( >> )`,
							`ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )`,
						]
					}
				],
				summary: [
					`Бинарные и унарные операторы`,
					`Математические операторы`,
					`Приоритет операторов`,
					`Побитовые операторы`
				]
			}
		},
			{
				name: `Условные ветвления`,
				link: `/javascript/conditions`,
				content: {
					title_text: [
						`Иногда нам нужно выполнить различные действия в зависимости от условий.`,
						`Для этого мы можем использовать инструкцию if и условный оператор ?, который также называют оператором «вопросительный знак».`
					],
					chapters: [
						{
							chapter_title: `Инструкция «if»`,
							chapter_text: [
								`Инструкция if(...) вычисляет условие в скобках и, если результат true, то выполняет блок кода.`,
								`Например:`
							],
							chapter_code: [
								<code className='code_container_multiple'>
									<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> message = propmpt(<span className='html_string'>'Когда я родился?'</span>, <span className='html_string'>''</span>)</div></div>
									<div><span className='counter'>2</span><div className='code_html'><span className='html_id'>if</span> (year == <span className='html_tag'>2004</span>) ｛</div></div>
									<div><span className='counter'>3</span><pre className='code_html'>			alert(<span className='html_string'>"Правильно!"</span>)</pre></div>
									<div><span className='counter'>4</span><div className='code_html'>｝</div></div>
								</code>,
							]
						},
						{
							chapter_title: `Блоки  «else» и «else if»`,
							chapter_text: [
								`Инструкция if может содержать необязательный блок «else» («иначе»). Он выполняется, когда условие ложно.`,
								`Также иногда, нужно проверить несколько вариантов условия. Для этого используется блок else if.`
							],
							chapter_code: [
								<code className='code_container_multiple'>
									<div><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> message = propmpt(<span className='html_string'>'Когда я родился?'</span>, <span className='html_string'>''</span>)</div></div>
									<div><span className='counter'>2</span><div className='code_html'><span className='html_id'>if</span> (year == <span className='html_tag'>2004</span>) ｛</div></div>
									<div><span className='counter'>3</span><pre className='code_html'>			alert(<span className='html_string'>"Правильно!"</span>)</pre></div>
									<div><span className='counter'>4</span><div className='code_html'>｝<span className='html_id'>else if</span> (year ＜ <span className='html_tag'>2004</span>) ｛</div></div>
									<div><span className='counter'>5</span><pre className='code_html'>			alert(<span className='html_string'>"Я не такой старый!"</span>)</pre></div>
									<div><span className='counter'>6</span><div className='code_html'>｝<span className='html_id'>else </span> (year ＞ <span className='html_tag'>2004</span>) ｛</div></div>
									<div><span className='counter'>6</span><pre className='code_html'>			alert(<span className='html_string'>"Я не малыш..."</span>)</pre></div>
									<div><span className='counter'>6</span><div className='code_html'>｝</div></div>
								</code>
							],
					},
					{
						chapter_title: `Условный оператор „?“`,
						chapter_text: [
							`Иногда нам нужно определить переменную в зависимости от условия.`,
							`Так называемый «условный» оператор «вопросительный знак» позволяет нам сделать это более коротким и простым способом.`,
							`Оператор представлен знаком вопроса ?. Его также называют «тернарный», так как этот оператор, единственный в своём роде, имеет три аргумента.`,
							`Синтаксис:`
						],
						chapter_code: [
							<code className='code_container_html'><span className='counter'>1</span><div className='code_html'><span className='html_id'>let</span> accessAllowed = (age ＞ <span className='html_tag'>18</span>) ? <span className='html_tag'>true</span> : <span className='html_tag'>false</span>;</div></code>,
						]
					},
				],
				summary: [
					`Условное ветвление 'if'`,
					`Блоки  «else» и «else if»`,
					`Другой вариант записи условных ветвлений - оператор '?'`,
				]
			}

		},
		{
			name: `Функции`,
			link: `/javascript/functions`
		},
		{
			name: `Объекты`,
			link: `/javascript/objects`
		}
		]
	},
	// {
	// 	section: `React`,
	// 	link: `/react`,
	// 	courses: [{
	// 		name: `Компоненты`,
	// 		link: `/react/components`
	// 	},
	// 	{
	// 		name: `Свойства (props)`,
	// 		link: `/react/props`
	// 	},
	// 	{
	// 		name: `Состояние (state)`,
	// 		link: `/react/state`
	// 	},
	// 	{
	// 		name: `Условия`,
	// 		link: `/react/conditions`
	// 	},
	// 	{
	// 		name: `Списки`,
	// 		link: `/react/lists`
	// 	}
	// 	]
	// },
	// {
	// 	section: `Frameworks`,
	// 	link: `/frameworks`,
	// 	courses: [{
	// 		name: `Препроцессоры`,
	// 		link: `/frameworks/tags`
	// 	},
	// 	{
	// 		name: `UI Библиотеки`,
	// 		link: `/frameworks/ui-themes`
	// 	},
	// 	{
	// 		name: `"State" менеджер Redux`,
	// 		link: `/frameworks/redux`
	// 	},
	// 	{
	// 		name: `Плагин Emmet`,
	// 		link: `/frameworks/emmet`
	// 	},
	// 	{
	// 		name: `Управление версиями Git`,
	// 		link: `/frameworks/git`
	// 	}
	// 	]
	// }
]

export default courseNames